apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//apply plugin: 'io.fabric'

Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

android {
    signingConfigs {
        debug {
            keyAlias properties.getProperty('keyAlias')
            keyPassword properties.getProperty('keyPassword')
            storePassword properties.getProperty('storePassword')
            storeFile file(properties.getProperty('keyStoreLocation', " "))

        }
    }
    compileSdkVersion 28
    defaultConfig {
        /*ndk {
            abiFilters "armeabi"
        }*/
        applicationId "co.com.pagatodo.core"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 10
        versionName "1.6"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    /*android{
        splits {
            abi {
                enable true
                reset()
                universalApk true
            }
        }
    }*/
    buildTypes {

        def PROTOCOL_DEV = properties.getProperty('PROTOCOL_DEV')
        def IP_ADDRESS_DEV = properties.getProperty('IP_ADDRESS_DEV')
        def PORT_DEV = properties.getProperty('PORT_DEV')

        def PROTOCOL_TEST = properties.getProperty('PROTOCOL_TEST')
        def IP_ADDRESS_TEST = properties.getProperty('IP_ADDRESS_TEST')
        def PORT_TEST = properties.getProperty('PORT_TEST')

        def PROTOCOL_PRE = properties.getProperty('PROTOCOL_PRE')
        def IP_ADDRESS_PRE = properties.getProperty('IP_ADDRESS_PRE')
        def PORT_PRE = properties.getProperty('PORT_PRE')

        def PROTOCOL_PROD = properties.getProperty('PROTOCOL_PROD')
        def IP_ADDRESS_PROD = properties.getProperty('IP_ADDRESS_PROD')
        def PORT_PROD = properties.getProperty('PORT_PROD')

        debug {
            applicationIdSuffix ".debug"
            minifyEnabled true
            useProguard true
            shrinkResources true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "$VAR_NAME_BASE_URL", "\"$PROTOCOL_DEV://$IP_ADDRESS_DEV:$PORT_DEV/ChaxGW/rest/\""
            buildConfigField "String", "$VAR_NAME_IP_ADDRESS", "\"$IP_ADDRESS_DEV\""
            buildConfigField("boolean", "$VAR_NAME_IS_MODE_PRINT", "false")
            buildConfigField("boolean", "$VAR_NAME_IS_FAKE_TERMINAL_CODE", "true")
            buildConfigField("boolean", "$VAR_NAME_SHOULD_USE_SSL", "true")
            buildConfigField("String", "$VAR_NAME_BUILD_VARIAN", "\"DEV \"")
        }
        debugPrint {
            initWith debug
            buildConfigField("boolean", "$VAR_NAME_IS_MODE_PRINT", "true")
            buildConfigField("boolean", "$VAR_NAME_IS_FAKE_TERMINAL_CODE", "true")
            signingConfig signingConfigs.debug
        }
        ambTest {
            applicationIdSuffix ".testrelease"
            minifyEnabled true
            useProguard true
            shrinkResources true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "$VAR_NAME_BASE_URL", "\"$PROTOCOL_TEST://$IP_ADDRESS_TEST:$PORT_TEST/ChaxGW/rest/\""
            buildConfigField "String", "$VAR_NAME_IP_ADDRESS", "\"$IP_ADDRESS_TEST\""
            buildConfigField("boolean", "$VAR_NAME_IS_MODE_PRINT", "false")
            buildConfigField("boolean", "$VAR_NAME_IS_FAKE_TERMINAL_CODE", "true")
            buildConfigField("boolean", "$VAR_NAME_SHOULD_USE_SSL", "true")
            buildConfigField("String", "$VAR_NAME_BUILD_VARIAN", "\"TEST \"")
            signingConfig signingConfigs.debug
        }
        ambTestPrint {
            initWith ambTest
            buildConfigField("boolean", "$VAR_NAME_IS_FAKE_TERMINAL_CODE", "true")
            buildConfigField("boolean", "$VAR_NAME_IS_MODE_PRINT", "true")
            signingConfig signingConfigs.debug
        }
        preproduction {
            applicationIdSuffix ".prerelease"
            minifyEnabled true
            useProguard true
            shrinkResources true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "$VAR_NAME_BASE_URL", "\"$PROTOCOL_PRE://$IP_ADDRESS_PRE:$PORT_PRE/ChaxGW/rest/\""
            buildConfigField "String", "$VAR_NAME_IP_ADDRESS", "\"$IP_ADDRESS_PRE\""
            buildConfigField("boolean", "$VAR_NAME_IS_MODE_PRINT", "false")
            buildConfigField("boolean", "$VAR_NAME_IS_FAKE_TERMINAL_CODE", "false")
            buildConfigField("boolean", "$VAR_NAME_SHOULD_USE_SSL", "true")
            buildConfigField("String", "$VAR_NAME_BUILD_VARIAN", "\"PRE \"")
            signingConfig signingConfigs.debug
        }
        preproductionPrint {
            initWith preproduction
            buildConfigField("boolean", "$VAR_NAME_IS_FAKE_TERMINAL_CODE", "false")
            buildConfigField("boolean", "$VAR_NAME_IS_MODE_PRINT", "true")
            signingConfig signingConfigs.debug
        }
        production {
            applicationIdSuffix ".release"
            minifyEnabled true
            useProguard true
            shrinkResources true
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "$VAR_NAME_BASE_URL", "\"$PROTOCOL_PROD://$IP_ADDRESS_PROD:$PORT_PROD/ChaxGW/rest/\""
            buildConfigField "String", "$VAR_NAME_IP_ADDRESS", "\"$IP_ADDRESS_PROD\""
            buildConfigField("boolean", "$VAR_NAME_IS_MODE_PRINT", "false")
            buildConfigField("boolean", "$VAR_NAME_IS_FAKE_TERMINAL_CODE", "false")
            buildConfigField("boolean", "$VAR_NAME_SHOULD_USE_SSL", "true")
            buildConfigField("String", "$VAR_NAME_BUILD_VARIAN", "\"\"")
            signingConfig signingConfigs.debug
        }
        productionPrint {
            initWith production
            buildConfigField("boolean", "$VAR_NAME_IS_FAKE_TERMINAL_CODE", "false")
            buildConfigField("boolean", "$VAR_NAME_IS_MODE_PRINT", "true")
            signingConfig signingConfigs.debug
        }

        release {
            initWith production
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "version"
    productFlavors {
        dataphone {
            applicationIdSuffix ".dataphone"
            buildConfigField "String", "$VAR_NAME_DEVICE_TYPE", '"dataphone"'
        }
        salepoint {
            applicationIdSuffix ".salepoint"
            buildConfigField "String", "$VAR_NAME_DEVICE_TYPE", '"salepoint"'
        }
        smartphone {
            applicationIdSuffix ".smartphone"
            buildConfigField "String", "$VAR_NAME_DEVICE_TYPE", '"smartphone"'
        }
    }
    splits {
        abi {
            enable true
            reset()
            include 'x86', 'armeabi-v7a', 'x86_64'
            universalApk true
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0-alpha1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'
    testImplementation "org.mockito:mockito-core:$mockito_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"
    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation 'com.squareup.okhttp3:logging-interceptor:3.12.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxjava_android_version"
    implementation 'com.jakewharton.rxbinding3:rxbinding:3.0.0-alpha2'
    implementation 'com.jakewharton.rxbinding2:rxbinding-kotlin:2.2.0'
    implementation 'com.google.android.material:material:1.0.0'
    implementation 'com.jaredrummler:material-spinner:1.3.1'
    compileOnly files('external-libs/new9220.jar')
    implementation files('libs/core-3.3.0.jar')
    implementation files('libs/libtmuprinter-release.aar')
    implementation files('libs/fingerprintlibrary-release.aar')
    implementation files('libs/fingerprintlibraryq2-release.aar')
    implementation files('libs/cloudpossdk-1.5.2.19.aar')
    implementation files('libs/clienteredebanlibrary-release.aar')
    implementation files('libs/proxyapi.aar')

    implementation 'com.itextpdf:itextg:5.5.10'

    /*Room Database*/
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"
    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"
    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"


    /*implementation 'com.google.firebase:firebase-core:16.0.8'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.9.9'*/
}


//apply plugin: 'com.google.gms.google-services'

